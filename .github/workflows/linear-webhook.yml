name: Handle Linear Issue Created with AI

on:
  repository_dispatch:
    types: [linear_issue_created]

permissions:
  contents: write
  pull-requests: write

jobs:
  handle-linear-issue:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Extract Linear Issue Data
        id: linear
        run: |
          echo "issue_id=${{ github.event.client_payload.issueId }}" >> $GITHUB_OUTPUT
          echo "issue_title=${{ github.event.client_payload.issueTitle }}" >> $GITHUB_OUTPUT
          echo "issue_url=${{ github.event.client_payload.issueUrl }}" >> $GITHUB_OUTPUT

      - name: Compute branch name
        id: names
        run: |
          # branch: linear-<ISSUE_ID>-<slug-of-title>
          TITLE_SLUG="$(echo "${{ steps.linear.outputs.issue_title }}" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9- ' | tr ' ' '-' | sed 's/--*/-/g' | cut -c1-40)"
          BRANCH="linear-${{ steps.linear.outputs.issue_id }}${TITLE_SLUG:+-$TITLE_SLUG}"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Create branch from latest main
        run: |
          git config user.name 'Linear AI Bot'
          git config user.email 'noreply@github.com'
          git fetch origin main
          git checkout -B "${{ steps.names.outputs.branch }}" origin/main

      - name: Analyze Issue with Claude and Generate Code
        id: ai_analysis
        run: |
          # Create a Node.js script to call Claude API
          cat > analyze_issue.js << 'EOF'
          const https = require('https');

          const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY;
          const issueTitle = process.argv[2];
          const issueId = process.argv[3];

          if (!CLAUDE_API_KEY) {
            console.log('⚠️  CLAUDE_API_KEY not set - creating basic implementation');
            generateBasicImplementation();
            process.exit(0);
          }

          const prompt = `You are a senior developer. A Linear issue was created with this title: "${issueTitle}"

          Based on this issue, generate appropriate code files for a React application using Vite and shadcn/ui.

          Rules:
          1. Analyze what the issue is asking for
          2. Generate complete, working code files
          3. Use modern React patterns (hooks, TypeScript)
          4. Include shadcn/ui components where appropriate
          5. Provide package.json updates if needed
          6. Be specific and practical

          Respond with a JSON object containing:
          {
            "analysis": "Brief analysis of what needs to be implemented",
            "files": [
              {
                "path": "relative/path/to/file.tsx",
                "content": "complete file content",
                "description": "what this file does"
              }
            ],
            "dependencies": ["package1", "package2"],
            "instructions": "Additional setup instructions"
          }

          Generate real, working code that addresses the issue.`;

          const data = JSON.stringify({
            model: "claude-3-5-sonnet-20241022",
            max_tokens: 4000,
            messages: [
              {
                role: "user",
                content: prompt
              }
            ]
          });

          const options = {
            hostname: 'api.anthropic.com',
            port: 443,
            path: '/v1/messages',
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-API-Key': CLAUDE_API_KEY,
              'anthropic-version': '2023-06-01',
              'Content-Length': data.length
            }
          };

          const req = https.request(options, (res) => {
            let body = '';
            res.on('data', (chunk) => body += chunk);
            res.on('end', () => {
              try {
                const response = JSON.parse(body);
                const content = response.content[0].text;
                
                // Extract JSON from Claude's response
                const jsonMatch = content.match(/\{[\s\S]*\}/);
                if (jsonMatch) {
                  const result = JSON.parse(jsonMatch[0]);
                  implementCode(result);
                } else {
                  console.log('⚠️  Could not parse Claude response - creating basic implementation');
                  generateBasicImplementation();
                }
              } catch (error) {
                console.log('⚠️  Error processing Claude response:', error.message);
                generateBasicImplementation();
              }
            });
          });

          req.on('error', (error) => {
            console.log('⚠️  API request failed:', error.message);
            generateBasicImplementation();
          });

          req.write(data);
          req.end();

          function implementCode(result) {
            console.log('🤖 AI Analysis:', result.analysis);
            
            // Create files based on AI response
            result.files.forEach(file => {
              const fs = require('fs');
              const path = require('path');
              
              // Ensure directory exists
              const dir = path.dirname(file.path);
              if (dir && dir !== '.') {
                fs.mkdirSync(dir, { recursive: true });
              }
              
              // Write file
              fs.writeFileSync(file.path, file.content);
              console.log(`✅ Created: ${file.path}`);
            });
            
            // Write implementation summary
            const summary = {
              analysis: result.analysis,
              files_created: result.files.map(f => f.path),
              dependencies: result.dependencies || [],
              instructions: result.instructions || 'No additional setup needed'
            };
            
            fs.writeFileSync('AI_IMPLEMENTATION.json', JSON.stringify(summary, null, 2));
            console.log('📋 Implementation summary saved to AI_IMPLEMENTATION.json');
          }

          function generateBasicImplementation() {
            const fs = require('fs');
            
            // Create a basic React component based on the issue title
            const componentName = issueTitle
              .split(' ')
              .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
              .join('')
              .replace(/[^a-zA-Z0-9]/g, '');
            
            const basicComponent = `import React from 'react';

          export const ${componentName} = () => {
            return (
              <div className="p-4">
                <h1 className="text-2xl font-bold mb-4">
                  ${issueTitle}
                </h1>
                <p className="text-gray-600">
                  This component was auto-generated from Linear issue: ${issueId}
                </p>
                <div className="mt-4 p-4 bg-gray-100 rounded-lg">
                  <p className="text-sm">
                    🚧 Implementation needed: ${issueTitle}
                  </p>
                </div>
              </div>
            );
          };

          export default ${componentName};
          `;
            
            fs.mkdirSync('src/components', { recursive: true });
            fs.writeFileSync(`src/components/${componentName}.tsx`, basicComponent);
            
            const summary = {
              analysis: `Basic component generated for: ${issueTitle}`,
              files_created: [`src/components/${componentName}.tsx`],
              dependencies: [],
              instructions: 'Complete the implementation based on the Linear issue requirements'
            };
            
            fs.writeFileSync('AI_IMPLEMENTATION.json', JSON.stringify(summary, null, 2));
            console.log(`✅ Created basic component: src/components/${componentName}.tsx`);
          }
          EOF

          # Run the analysis
          node analyze_issue.js "${{ steps.linear.outputs.issue_title }}" "${{ steps.linear.outputs.issue_id }}"
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}

      - name: Add tracking file and AI implementation
        run: |
          mkdir -p issues
          
          # Read AI implementation summary if it exists
          AI_SUMMARY=""
          if [ -f "AI_IMPLEMENTATION.json" ]; then
            AI_SUMMARY=$(cat AI_IMPLEMENTATION.json)
          fi
          
          cat > "issues/${{ steps.linear.outputs.issue_id }}.md" << EOF
          # Linear Issue: ${{ steps.linear.outputs.issue_title }}

          **Issue ID:** ${{ steps.linear.outputs.issue_id }}
          **Created:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          **Linear URL:** ${{ steps.linear.outputs.issue_url }}

          ## AI Analysis & Implementation

          The following files were automatically generated based on the issue requirements:

          \`\`\`json
          ${AI_SUMMARY}
          \`\`\`

          ## Next Steps
          - [ ] Review AI-generated code
          - [ ] Test the implementation
          - [ ] Refine as needed
          - [ ] Mark as ready for review
          EOF
          
          git add .
          git commit -m "feat: AI-generated implementation for ${{ steps.linear.outputs.issue_id }}

          - Auto-analyzed Linear issue: ${{ steps.linear.outputs.issue_title }}
          - Generated code files using Claude AI
          - Created implementation tracking
          
          Linear: ${{ steps.linear.outputs.issue_url }}"

      - name: Push branch
        run: git push -u origin "${{ steps.names.outputs.branch }}"

      - name: Create Pull Request with AI Implementation
        id: create_pull_request
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let aiSummary = '';
            
            try {
              if (fs.existsSync('AI_IMPLEMENTATION.json')) {
                const summary = JSON.parse(fs.readFileSync('AI_IMPLEMENTATION.json', 'utf8'));
                aiSummary = `
            ## 🤖 AI-Generated Implementation
            
            **Analysis:** ${summary.analysis}
            
            **Files Created:**
            ${summary.files_created.map(file => `- \`${file}\``).join('\n')}
            
            **Dependencies:** ${summary.dependencies.length > 0 ? summary.dependencies.join(', ') : 'None'}
            
            **Instructions:** ${summary.instructions}
                `;
              }
            } catch (error) {
              aiSummary = '\n## ⚠️ AI Implementation Status\nBasic implementation created. AI analysis unavailable.\n';
            }
            
            const title = `🤖 Linear: ${{ steps.linear.outputs.issue_id }} — ${{ steps.linear.outputs.issue_title }}`;
            const body = `
            ## Linear Issue Integration
            
            **Issue ID:** ${{ steps.linear.outputs.issue_id }}
            **Title:** ${{ steps.linear.outputs.issue_title }}
            **Linear URL:** ${{ steps.linear.outputs.issue_url }}
            
            This PR was automatically created and implemented using AI based on the Linear issue.
            ${aiSummary}
            
            ## Review Checklist
            - [ ] Code quality and patterns
            - [ ] Functionality matches requirements  
            - [ ] Tests are needed/included
            - [ ] Documentation is adequate
            - [ ] Ready to merge
            
            ---
            *🚀 Powered by Linear Webhook + Claude AI*
            `;
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              head: "${{ steps.names.outputs.branch }}",
              base: "main",
              body,
              draft: false  // Not draft since AI has generated implementation
            });
            core.setOutput("pr_number", pr.number);

      - name: Comment on PR with AI Details
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number("${{ steps.create_pull_request.outputs.pr_number || 0 }}") || undefined,
              body: `🎯 **Linear → AI Implementation Complete**
              
              ✅ Analyzed issue: [${{ steps.linear.outputs.issue_id }}](${{ steps.linear.outputs.issue_url }})
              ✅ Generated code automatically
              ✅ Ready for review!
              
              The AI has created an initial implementation based on the Linear issue requirements. Please review and refine as needed.`
            }).catch(() => {});
